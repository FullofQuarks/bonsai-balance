@page "/ledger"
@using BonsaiBalance.Blazor.Data
@inject InputDataService _inputDataService;
@inject NavigationManager _navigationManager;
@inject IJSRuntime _jsRuntime
<PageTitle>Ledger</PageTitle>

<h2>Ledger Data</h2>
@if (_inputData.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-success" @onclick="Redirect">Add Data</button>
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Payee</th>
            <th scope="col">Amount</th>
            <th scope="col">Account</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var inputData in _inputData)
        {
            <tr>
                <td>@inputData.Date.ToShortDateString()</td>
                <td>@inputData.Payee</td>
                <td>@string.Format($"{inputData.Amount:C}")</td>
                <td>@inputData.Account</td>
            </tr>
        }
        <tr @onkeydown="Submitted">
            <td>
                <input id="inputDate" @ref="_inputDateRef" class="form-control" type="date" @bind="InputDate" autofocus/>
            </td>
            <td>
                <input @bind="Payee" class="form-control" type="text"/>
            </td>
            <td>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    <input @bind="Amount" class="form-control" type="number"/>
                </div>
            </td>
            <td>
                <input @bind="Account" class="form-control" type="text"/>
            </td>
        </tr>
        </tbody>
    </table>
}

@code {
    private List<InputData> _inputData = new();

    private DateTime InputDate { get; set; } = DateTime.Now;
    private string? Payee { get; set; }
    private decimal? Amount { get; set; }
    private string? Account { get; set; }
    private ElementReference _inputDateRef;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_inputData.Count);
        _inputData = await _inputDataService.GetInputDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusOnInputDate();
        }
    }

    private async Task FocusOnInputDate()
    {
        await _jsRuntime.InvokeVoidAsync("SetFocusToElement", _inputDateRef);
    }

    private void Redirect()
    {
        _navigationManager.NavigateTo("/ledger-input");
    }

    private async Task Submitted(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(Payee) && Amount != null && !string.IsNullOrEmpty(Account))
            {
                var newInputData = new InputData
                {
                    Date = InputDate.Date,
                    Account = Account,
                    Amount = Amount.Value,
                    Payee = Payee
                };
                await _inputDataService.AddNewData(newInputData);
                _inputData.Add(newInputData);
                await FocusOnInputDate();
            }
        }
    }

}
